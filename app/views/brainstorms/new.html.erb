<div class="mx-auto px-4 xl:px-0 lg:max-w-screen-lg xl:max-w-screen-xl">
  <%= render 'shared/menu' %>
  <div class="flex flex-col">
    <div class="bg-blurple flex flex-col">
      <div class="bg-dots-smaller mt-12 h-24 mx-6"></div>
      <div class="bg-white w-full flex flex-col my-shadow px-14 pb-24 lg:pb-0">
        <%= link_to root_path do %>
          <div class="lg:-mt-10 -mt-16 italic bg-black w-32 h-32 lg:w-20 lg:h-20 text-white text-7xl lg:text-5xl flex font-bold items-center justify-center">
            <span>B</span>
          </div>
        <% end %>

        <div class="flex justify-between items-center lg:mt-12 mt-24">
          <p class="lg:text-4xl text-7xl font-bold text-blurple">SETUP BRAINSTORM</p>
          <span class="material-icons-outlined lg:text-5xl text-10xl text-blurple">flash_on</span>
        </div>
          

        <%= form_with model: @brainstorm, local: true, class: "flex flex-col", id: "setup-brainstorm-form" do |f| %>
        <div class="flex flex-col lg:my-12 my-20 mb-8 lg:mb-0 bg-white">
          <div class="flex flex-row justify-between items-baseline lg:mb-2 mb-6">
            <%= f.label :problem_to_solve, class: "italic lg:text-2xl text-5xl font-bold leading-none" %>
            <p class="hidden lg:flex opacity-50 text-black italic font-semibold lg:text-base text-2xl">Need help? See TIPS & TRICKS</p>
          </div>
          <%= f.text_field :problem, class: "lg:text-base text-6xl focus:outline-none border-solid border-2 border-black lg:h-12 italic font-bold px-4 w-full", autocomplete: "off" %>
          <span class="md:text-4xl lg:text-xs mt-1 mb-4 ml-auto justify-end flex" id="characterCountProblem">200 characters remaining</span>

          <% if @brainstorm.errors[:problem].any? %>
            <div class="leading-none p-2 mt-1 lg:text-sm text-2xl font-bold italic text-white bg-wine">
              <span><%= @brainstorm.errors[:problem][0] %></span>
            </div>
          <% end %>
        </div>

        <div onclick="toggleTipsAndTricks()" class="lg:mb-6 mb-8 mt-4 lg:mt-4 cursor-pointer lg:px-2 px-6 bg-light-blurple lg:text-sm text-3xl text-blurple lg:flex hidden flex-row self-end items-center">
          <div class="lg:mr-2 mr-6 flex justify-center border-solid border border-black lg:w-5 lg:h-5 w-10 h-10">
            <p class="leading-none self-center">i</p>
          </div>
          <p class="font-semibold">TIPS & TRICKS</p>
          <span id="tipsAndTricksArrow" class="transform material-icons-outlined lg:text-3xl text-6xl">expand_more</span>
        </div>
      </div>

        <div class="bg-white flex flex-col">
          <div id="tipsAndTricksContainerNewPage" class="hidden flex-col px-16 pb-8 justify-between">
            <div class="">
              <p class="leading-loose italic font-bold lg:text-lg text-2xl uppercase mb-4">What makes a good problem statement?</p>
            </div>
            <div class="flex-col flex mx-8 justify-around mb-4 lg:text-base text-xl">
              <div class="items-center flex-row flex">
                <div class="h-2 w-2 bg-black mr-4"></div>
                <p class="mb-2"><span class="bg-yellowy">Make it <span class="font-bold">open</span> enough to inspire a lot of ideas.</span></p>
              </div>
              <div class="items-center flex-row flex">
                <div class="h-2 w-2 bg-black mr-4"></div>
                <p class="mb-2"><span class="bg-yellowy">Make it <span class="font-bold">closed</span> enough to give your team the direction they need.</span></p>
              </div>
              <div class="items-center flex-row flex">
                <div class="h-2 w-2 bg-black mr-4"></div>
                <p class="mb-2"><span class="bg-yellowy">Make sure that it can't be answered with a simple <span class="font-bold">yes or no</span>.</span></p>
              </div>
            </div>
            <p class="leading-loose italic font-bold lg:text-lg text-2xl uppercase mb-3">To achieve this, you can start the statement with "HOW MIGHT WE..."</p>
            <div class="flex-col flex ml-8 justify-around">
              <div class="items-center flex-row flex justify-between lg:text-base text-xl">
                <div class="flex items-center">
                  <div class="h-2 w-2 bg-black mr-4"></div>
                  <p><span class="bg-yellowy"><span class="font-bold">How might we</span> prevent shopping carts from getting rusty.</span></p>
                </div>
                <div class="flex items-center text-reddy">
                  <p class="mr-2">TOO NARROW</p>
                  <span class="material-icons lg:text-3xl font-bold">close</span>
                </div>
              </div>
              <div class="items-center flex-row flex justify-between">
                <div class="flex items-center">
                  <div class="h-2 w-2 bg-black mr-4"></div>
                  <p><span class="bg-yellowy"><span class="font-bold">How might we</span> reinvent shopping.</span></p>
                </div>
                <div class="flex items-center text-reddy">
                  <p class="mr-2">TOO OPEN</p>
                  <span class="material-icons lg:text-3xl font-bold">close</span>
                </div>
              </div>
              <div class="items-center flex-row flex justify-between">
                <div class="flex items-center">
                  <div class="h-2 w-2 bg-black mr-4"></div>
                  <p><span class="bg-yellowy"><span class="font-bold">How might we</span> redesign shopping carts to last longer.</span></p>
                </div>
                <div class="flex items-center text-greeny">
                  <p class="mr-2">PERFECT</p>
                  <span class="material-icons lg:text-3xl font-bold">done</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      


        <% if !current_user %>
        <div class="my-shadow-lg bg-light-blurple flex flex-col py-12 px-16">
          <div class="flex flex-row justify-between items-baseline lg:mb-2 mb-6">
            <%= f.label :name, class: "italic lg:text-2xl text-5xl font-bold leading-none"  %>
            <p class="opacity-50 text-black italic font-semibold lg:text-base text-3xl">Let your participants know who you are</p>
          </div>
          <%= f.text_field :name, :value => current_user&.name, class: "lg:text-base text-6xl focus:outline-none border-solid border-2 border-black lg:h-10 italic font-bold px-4 w-full", autocomplete: "off" %>

          <% if @brainstorm.errors[:name].any? %>
            <div class="leading-none p-2 mt-1 lg:text-sm text-2xl font-bold italic text-white bg-wine">
              <span><%= @brainstorm.errors[:name][0] %></span>
            </div>
          <% end %>

          <% unless current_user %>
            <p class="lg:text-xs text-2xl mt-8">By using Brainstormer you are agreeing to the <%= link_to "privacy policy.", privacy_policy_path, class:"underline" %></p>
          <% end %>
        </div>
        <% else %>
        <%= f.hidden_field :name, :value => current_user.name %>
        <% end %>
        <div class="my-8 flex flex-row justify-between lg:mt-8 mt-20">
          <%= link_to root_path do %>
          <span class="material-icons lg:p-3 p-7 lg:text-5xl text-8xl text-blurple hvr-grow active:bg-blurple-gray cursor-pointer my-shadow bg-white font-bold">chevron_left</span>
          <% end %>
          <%= f.submit 'CREATE BRAINSTORM', id: "submitCreateBrainstorm", class: "bg-gray-200 text-gray-400 lg:text-lg text-5xl lg:px-10 px-16 font-bold pointer-events-none" %>
          <% end %>
        </div>
      

      </div>
      <div class="bg-dots-smaller mb-12 mt-8 h-40 mx-6"></div>
    </div>
    <%= render 'shared/footer' %>
  </div>
</div>

<script>
  const toggleTipsAndTricks = () => {
    const tAndTContainer = document.getElementById("tipsAndTricksContainerNewPage")         
    const tAndTarrow = document.getElementById("tipsAndTricksArrow")         
    tAndTContainer.classList.contains("hidden") ? tAndTContainer.classList.remove("hidden") : tAndTContainer.classList.add("hidden")
    tAndTarrow.classList.contains("rotate-180") ? tAndTarrow.classList.remove("rotate-180") : tAndTarrow.classList.add("rotate-180")
  }

  let maxCharacters = 200
  let allInputFieldsForValidation = [document.getElementById("brainstorm_problem"), document.getElementById("brainstorm_name")]
  let inputFieldWithCharacterCount = document.getElementById("brainstorm_problem");
  let characterCount = document.getElementById("characterCountProblem");
  let submitButton = document.getElementById("submitCreateBrainstorm");
  let activeColors = ["bg-light-greeny", "active:bg-light-greeny-darker", "hvr-grow", "cursor-pointer", "text-blurple", "my-shadow-lg"]
  let inactiveColors = ["pointer-events-none", "bg-gray-200", "text-gray-400"]

  addEventListenerToSubmitButton = function (submitButton, inputFieldWithCharacterCount, maxCharacters, countText) {
    const p = countText
    submitButton.addEventListener(
      "click",
      function () {
        p.innerHTML = inputFieldWithCharacterCount.value.length + "/" + maxCharacters
        p.classList.remove("text-red-400")
        p.textContent = "0" + "/" + maxCharacters
      }
    )
  };

  addEventListenerToInputField = function (inputFieldWithCharacterCount, countText, maxCharacters) {
    const p = countText
    inputFieldWithCharacterCount.addEventListener(
      "input",
      function () {
        p.textContent = inputFieldWithCharacterCount.value.length + "/" + maxCharacters
        if (inputFieldWithCharacterCount.value.length >= maxCharacters - 2) {
          p.classList.add("text-red-400");
        } else if (inputFieldWithCharacterCount.value.length <= maxCharacters - 2) {
          p.classList.remove("text-red-400");
        }
      }
    );
  };

  setMaxCharacters = (inputFieldWithCharacterCount, maxCharacters) => {
    inputFieldWithCharacterCount.maxLength = maxCharacters
  }

  setInnerHTMLOfCountText = (inputFieldWithCharacterCount, maxCharacters, countText) => {
    const p = countText
    p.innerHTML = inputFieldWithCharacterCount.value.length + "/" + maxCharacters
  };

  fieldsWithoutPresence = (allInputFieldsForValidation) => {
    let counter = 0
    allInputFieldsForValidation.forEach(inputFieldForValidation => {
    if (inputFieldForValidation.value.trim() === "") {
      counter += 1
    }
    })
    return counter
  }

  addColorToSubmitButton = function (submitButton, activeColors, inactiveColors) {
    activeColors.forEach(activeColor => {
        submitButton.classList.add(activeColor);
    });
    inactiveColors.forEach(inactiveColor => {
        submitButton.classList.remove(inactiveColor);
    });
  };

  removeColorFromSubmitButton = function(submitButton, activeColors, inactiveColors) {
    activeColors.forEach(activeColor => {
      submitButton.classList.remove(activeColor);
    });
    inactiveColors.forEach(inactiveColor => {
      submitButton.classList.add(inactiveColor);
    });
    //submitButton.firstElementChild.style.fill = "white";
  }

  colorSubmitButtonOnTyping = (submitButton, allInputFieldsForValidation, activeColors, inactiveColors) => {
    allInputFieldsForValidation.forEach(inputFieldForValidation => {
      inputFieldForValidation.addEventListener(
        "keyup",
        function () {
            if ((inputFieldForValidation.value.length > 0) && (fieldsWithoutPresence(allInputFieldsForValidation) === 0)) {
              addColorToSubmitButton(submitButton, activeColors, inactiveColors)
            } else if (inputFieldForValidation.value.length === 0) {
              removeColorFromSubmitButton(submitButton, activeColors, inactiveColors)
            }
        }
      )
    })
  };

  addEventListenerToSubmitButton(submitButton, inputFieldWithCharacterCount, maxCharacters, characterCount);

  addEventListenerToInputField(inputFieldWithCharacterCount, characterCount, maxCharacters);

  setInnerHTMLOfCountText(inputFieldWithCharacterCount, maxCharacters, characterCount);

  colorSubmitButtonOnTyping(submitButton, allInputFieldsForValidation, activeColors, inactiveColors);

  setMaxCharacters(inputFieldWithCharacterCount, maxCharacters)

</script>